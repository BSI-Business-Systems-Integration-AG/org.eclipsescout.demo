/*******************************************************************************
 * Copyright (c) 2013 BSI Business Systems Integration AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     BSI Business Systems Integration AG - initial API and implementation
 ******************************************************************************/
package org.eclipsescout.demo.minicrm.shared.ui.desktop.form;

import java.util.Map;

import javax.annotation.Generated;

import org.eclipse.scout.rt.shared.data.form.AbstractFormData;
import org.eclipse.scout.rt.shared.data.form.ValidationRule;
import org.eclipse.scout.rt.shared.data.form.fields.AbstractValueFieldData;
import org.eclipse.scout.rt.shared.data.form.fields.tablefield.AbstractTableFieldData;
import org.eclipse.scout.rt.shared.data.form.properties.AbstractPropertyData;
import org.eclipsescout.demo.minicrm.shared.services.code.CompanyRatingCodeType;
import org.eclipsescout.demo.minicrm.shared.services.code.CompanyTypeCodeType;

/**
 * <b>NOTE:</b><br>
 * This class is auto generated by the Scout SDK. No manual modifications recommended.
 * 
 * @generated
 */
@Generated(value = "org.eclipse.scout.sdk.workspace.dto.formdata.FormDataDtoUpdateOperation", comments = "This class is auto generated by the Scout SDK. No manual modifications recommended.")
public class CompanyFormData extends AbstractFormData {

  private static final long serialVersionUID = 1L;

  public CompanyFormData() {
  }

  /**
   * access method for property CompanyNr.
   */
  public Long getCompanyNr() {
    return getCompanyNrProperty().getValue();
  }

  /**
   * access method for property CompanyNr.
   */
  public void setCompanyNr(Long companyNr) {
    getCompanyNrProperty().setValue(companyNr);
  }

  public CompanyNrProperty getCompanyNrProperty() {
    return getPropertyByClass(CompanyNrProperty.class);
  }

  public CompanyRating getCompanyRating() {
    return getFieldByClass(CompanyRating.class);
  }

  public CompanyTypeGroup getCompanyTypeGroup() {
    return getFieldByClass(CompanyTypeGroup.class);
  }

  public G getG() {
    return getFieldByClass(G.class);
  }

  public H getH() {
    return getFieldByClass(H.class);
  }

  public I getI() {
    return getFieldByClass(I.class);
  }

  public Name getName() {
    return getFieldByClass(Name.class);
  }

  public ShortName getShortName() {
    return getFieldByClass(ShortName.class);
  }

  public Table getTable() {
    return getFieldByClass(Table.class);
  }

  public static class CompanyNrProperty extends AbstractPropertyData<Long> {

    private static final long serialVersionUID = 1L;

    public CompanyNrProperty() {
    }
  }

  public static class CompanyRating extends AbstractValueFieldData<Long> {

    private static final long serialVersionUID = 1L;

    public CompanyRating() {
    }

    /**
     * list of derived validation rules.
     */
    @Override
    protected void initValidationRules(Map<String, Object> ruleMap) {
      super.initValidationRules(ruleMap);
      ruleMap.put(ValidationRule.CODE_TYPE, CompanyRatingCodeType.class);
      ruleMap.put(ValidationRule.MASTER_VALUE_FIELD, CompanyTypeGroup.class);
      ruleMap.put(ValidationRule.MASTER_VALUE_REQUIRED, true);
      ruleMap.put(ValidationRule.ZERO_NULL_EQUALITY, true);
    }
  }

  public static class CompanyTypeGroup extends AbstractValueFieldData<Long> {

    private static final long serialVersionUID = 1L;

    public CompanyTypeGroup() {
    }

    /**
     * list of derived validation rules.
     */
    @Override
    protected void initValidationRules(Map<String, Object> ruleMap) {
      super.initValidationRules(ruleMap);
      ruleMap.put(ValidationRule.CODE_TYPE, CompanyTypeCodeType.class);
    }
  }

  public static class G extends AbstractValueFieldData<String> {

    private static final long serialVersionUID = 1L;

    public G() {
    }

    /**
     * list of derived validation rules.
     */
    @Override
    protected void initValidationRules(Map<String, Object> ruleMap) {
      super.initValidationRules(ruleMap);
      ruleMap.put(ValidationRule.MAX_LENGTH, 4000);
    }
  }

  public static class H extends AbstractValueFieldData<String> {

    private static final long serialVersionUID = 1L;

    public H() {
    }

    /**
     * list of derived validation rules.
     */
    @Override
    protected void initValidationRules(Map<String, Object> ruleMap) {
      super.initValidationRules(ruleMap);
      ruleMap.put(ValidationRule.MAX_LENGTH, 4000);
    }
  }

  public static class I extends AbstractValueFieldData<String> {

    private static final long serialVersionUID = 1L;

    public I() {
    }

    /**
     * list of derived validation rules.
     */
    @Override
    protected void initValidationRules(Map<String, Object> ruleMap) {
      super.initValidationRules(ruleMap);
      ruleMap.put(ValidationRule.MAX_LENGTH, 4000);
    }
  }

  public static class Name extends AbstractValueFieldData<String> {

    private static final long serialVersionUID = 1L;

    public Name() {
    }

    /**
     * list of derived validation rules.
     */
    @Override
    protected void initValidationRules(Map<String, Object> ruleMap) {
      super.initValidationRules(ruleMap);
      ruleMap.put(ValidationRule.MAX_LENGTH, 4000);
    }
  }

  public static class ShortName extends AbstractValueFieldData<String> {

    private static final long serialVersionUID = 1L;

    public ShortName() {
    }

    /**
     * list of derived validation rules.
     */
    @Override
    protected void initValidationRules(Map<String, Object> ruleMap) {
      super.initValidationRules(ruleMap);
      ruleMap.put(ValidationRule.MAX_LENGTH, 4000);
    }
  }

  public static class Table extends AbstractTableFieldData {

    private static final long serialVersionUID = 1L;
    public static final int A_COLUMN_ID = 0;
    public static final int B_COLUMN_ID = 1;
    public static final int G_COLUMN_ID = 2;

    public Table() {
    }

    public String getA(int row) {
      return (String) getValueInternal(row, A_COLUMN_ID);
    }

    public void setA(int row, String a) {
      setValueInternal(row, A_COLUMN_ID, a);
    }

    public Long getB(int row) {
      return (Long) getValueInternal(row, B_COLUMN_ID);
    }

    public void setB(int row, Long b) {
      setValueInternal(row, B_COLUMN_ID, b);
    }

    public Boolean getG(int row) {
      return (Boolean) getValueInternal(row, G_COLUMN_ID);
    }

    public void setG(int row, Boolean g) {
      setValueInternal(row, G_COLUMN_ID, g);
    }

    @Override
    public int getColumnCount() {
      return 3;
    }

    @Override
    public Object getValueAt(int row, int column) {
      switch (column) {
        case A_COLUMN_ID:
          return getA(row);
        case B_COLUMN_ID:
          return getB(row);
        case G_COLUMN_ID:
          return getG(row);
        default:
          return null;
      }
    }

    @Override
    public void setValueAt(int row, int column, Object value) {
      switch (column) {
        case A_COLUMN_ID:
          setA(row, (String) value);
          break;
        case B_COLUMN_ID:
          setB(row, (Long) value);
          break;
        case G_COLUMN_ID:
          setG(row, (Boolean) value);
          break;
      }
    }
  }
}
